./desktop/netsurf.c:148:	 * out of libcurl). However, we expect nothing else to generate a
./desktop/browser.c:56:#include "curl/curl.h"
./desktop/options.h:215: * the cURL socket.
./desktop/options.h:217:NSOPTION_UINT(curl_fetch_timeout, 10)
./desktop/options.h:219:/** Suppress debug output from cURL. */
./desktop/options.h:220:NSOPTION_BOOL(suppress_curl_debug, true)
./desktop/gui_fetch.h:94:	 * @note only used in curl fetcher on RISC OS otherwise its a
./utils/url.c:27:#include <curl/curl.h>
./utils/url.c:38:	char *curlstr;
./utils/url.c:41:	curlstr = curl_unescape(str, 0);
./utils/url.c:42:	if (curlstr == NULL) {
./utils/url.c:46:	retstr = strdup(curlstr);
./utils/url.c:47:	curl_free(curlstr);
./utils/nsoption.c:191:	if (opts[NSOPTION_curl_fetch_timeout].value.u < 5)
./utils/nsoption.c:193:	if (opts[NSOPTION_curl_fetch_timeout].value.u > 60)
./utils/nsoption.c:195:	while ((opts[NSOPTION_curl_fetch_timeout].value.u *
./content/llcache.c:40:#include <curl/curl.h>
./content/llcache.c:609:		object->cache.date = curl_getdate(*value, NULL);
./content/llcache.c:616:		object->cache.expires = curl_getdate(*value, NULL);
./content/llcache.c:669:		object->cache.last_modified = curl_getdate(*value, NULL);
./content/urldb.c:98:#include <curl/curl.h>
./content/urldb.c:1593:		expires = curl_getdate(datenoday, NULL);
./content/fetchers/curl.h:23:#ifndef NETSURF_CONTENT_FETCHERS_FETCH_CURL_H
./content/fetchers/curl.h:24:#define NETSURF_CONTENT_FETCHERS_FETCH_CURL_H
./content/fetchers/curl.h:26:#include <curl/curl.h>
./content/fetchers/curl.h:29: * Register curl scheme handler.
./content/fetchers/curl.h:33:nserror fetch_curl_register(void);
./content/fetchers/curl.h:35:/** Global cURL multi handle. */
./content/fetchers/curl.h:36:extern CURLM *fetch_curl_multi;
./content/fetchers/data.c:28:#include <curl/curl.h>		/* for URL unescaping functions */
./content/fetchers/data.c:61:static CURL *curl;
./content/fetchers/data.c:66:	if ( (curl = curl_easy_init()) == NULL)
./content/fetchers/data.c:75:	curl_easy_cleanup(curl);
./content/fetchers/data.c:204:        unescaped = curl_easy_unescape(curl, comma + 1, 0, &unescaped_len);
./content/fetchers/data.c:218:			curl_free(unescaped);
./content/fetchers/data.c:228:			curl_free(unescaped);
./content/fetchers/data.c:235:	curl_free(unescaped);
./content/fetch.c:293:	ret = fetch_curl_register();
./content/fetch.c:334:			 * curl operation is still in progress at exit
./content/fetch.c:335:			 * as the abort waits for curl to complete.
./content/fetch.c:337:			 * We could make the user wait for curl to
./content/fetch.c:388:	CURLMcode code;
./content/fetch.c:410:	code = curl_multi_fdset(fetch_curl_multi,
./content/fetch.c:415:	assert(code == CURLM_OK);
./content/fetch.c:426:		 * curl currently. This is because as it is assumed to
./content/urldb.h:266: * \return Cookies string for libcurl (on heap), or NULL on error/no cookies
